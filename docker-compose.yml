services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    command: >
      sh -c "./scripts/wait-for-db.sh &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app-backend
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - .env
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app-frontend
      - frontend_node_modules:/app-frontend/node_modules
    depends_on:
      - backend

  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      SONAR_JDBC_USERNAME: ${SONAR_JDBC_USERNAME}
      SONAR_JDBC_PASSWORD: ${SONAR_JDBC_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=${SONAR_JDBC_URL}
      - SONAR_JDBC_USERNAME=${SONAR_JDBC_USERNAME}
      - SONAR_JDBC_PASSWORD=${SONAR_JDBC_PASSWORD}
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - db

  sonarscanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonarscanner
    environment:
      - SONAR_HOST_URL=${SONAR_HOST_URL}
      - SONAR_LOGIN=${SONAR_TOKEN}
    volumes:
      - ./:/usr/src/
    depends_on:
      - sonarqube
    command: >
      sh -c "./backend/scripts/wait-for-sonar.sh sonarqube:9000 -- 
             sonar-scanner -Dsonar.token=$SONAR_TOKEN -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName=$SONAR_PROJECT_NAME -Dsonar.exclusions=**/node_modules/** -Dsonar.testExecutionReportPaths=frontend/testResults/sonar-report.xml"
    restart: "no"
    networks:
      - default

volumes:
  postgres_data:
  sonarqube_data:
  sonarqube_logs:
  frontend_node_modules:

networks:
  default:
    driver: bridge